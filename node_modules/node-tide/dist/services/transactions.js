"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Transformers = require("../transformers");
var service_1 = require("../services/service");
var Transactions = (function (_super) {
    __extends(Transactions, _super);
    function Transactions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Transactions.prototype.all = function (accountId) {
        return this.getRequest("/external/accounts/" + accountId + "/transactions", {})
            .then(function (response) { return (new Transformers.Transaction).items(response); });
    };
    Transactions.prototype.findReference = function (accountId, transactionReference) {
        return this.all(accountId)
            .then(function (transactions) {
            var foundTransactions = [];
            transactions.forEach(function (transaction) {
                var matchReference = transaction.description.match(/ref: (.*)/);
                if (matchReference && matchReference[1].toLowerCase() === transactionReference.toLowerCase()) {
                    foundTransactions.push(transaction);
                }
            });
            if (foundTransactions.length === 0) {
                throw new Error('No transactions found');
            }
            return foundTransactions;
        });
    };
    Transactions.prototype.findDateRange = function (accountId, startDate, endDate) {
        if (!endDate || endDate === undefined) {
            startDate = startDate.startOf('day');
            endDate = startDate.clone().endOf('day');
        }
        return this.all(accountId)
            .then(function (transactions) {
            var foundTransactions = [];
            transactions.forEach(function (transaction) {
                if (transaction.transactionOn.isBetween(startDate, endDate)) {
                    foundTransactions.push(transaction);
                }
            });
            if (foundTransactions.length === 0) {
                throw new Error('No transactions found');
            }
            return foundTransactions;
        });
    };
    return Transactions;
}(service_1.Service));
exports.Transactions = Transactions;
//# sourceMappingURL=transactions.js.map